git 命令常用：
            
			 -p，用来显示每次提交的内容差异
			 git log -p -2(表示最近两次提交内容的差异)   git log --pretty=oneline输出最近简短的信息
			 
			 每次提交的简略的统计信息
			 git log --stat
			 
			 
			 如果只是简单地从工作目录中手工删除文件，
			 运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：
			 
			    On branch master
				Your branch is up-to-date with 'origin/master'.
				Changes not staged for commit:
				  (use "git add/rm <file>..." to update what will be committed)
				  (use "git checkout -- <file>..." to discard changes in working directory)

						deleted:    PROJECTS.md

				no changes added to commit (use "git add" and/or "git commit -a")
			 
			 
			  如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）
			  git rm <file> -f
			  
			  
			  你想让文件保留在磁盘，但是并不想让 Git 继续跟踪
			  git rm --cached README(文件名)
			  
			  
			  版本回退
			    git git reset --hard  HEAD 指向哪一个版本
			   
			   当你用$ git reset --hard HEAD^回退到add distributed版本时，
			   再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
			 
			 
			   现在总结一下：

						HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

						穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

						要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
			 
			   git diff    #是工作区(work dict)和暂存区(stage)的比较
               git diff --cached    #是暂存区(stage)和分支(master)的比较
			   
			   
			   
			   git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
			   
			   
			   
			   git checkout -- readme.txt
			   
			   命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

				一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

				一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

				总之，就是让这个文件回到最近一次git commit或git add时的状态。
				
				
				
				********git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
				
				
				总结：
				    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

					场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

					场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库
			 
			 
			 创建和合并分支
			 
			          git checkout -b dev 创建dev分支
		               
					  相当于两条命令:git branch dev  git checkout dev
					  
					  
					  git branch查看当前分支(列出来所有分支)
					  
					  git checkout master 切换到master分支
					  
					  
					  git merge dev 把dev分支的工作成果合并到master
					  git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
					  
					  
			          git branch -d dev 删除dev分支
					  
					  总结:
					  
					       查看分支：git branch

							创建分支：git branch <name>

							切换分支：git checkout <name>

							创建+切换分支：git checkout -b <name>

							合并某分支到当前分支：git merge <name>

							删除分支：git branch -d <name>
			 
			 
			 
			             修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

                         当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场
			 
			 
			            如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
			 
			 
			 
			            多人协作问题http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000
			 
			 
			 
			 
			     git add * 提交多个文件到暂存区
			 
			 
			 
			 推本地分支
			 git push origin [branchname]
			 删除远程分支
			 git push --delete origin [branchname]
			 重命名远程分支{实际是先创建本地分支，然后把本地分支推到远程上面，然后删除远程分支}
			 git branch -m  [原来的分支名称] [新的分支名称]
			 
			 查看远程所有分支
			 git branch -a  [如果没有看到新分支信息 ：git fetch]
			 6. git checkout -b dev origin/dev，作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支
             7. git checkout -b release origin/release，作用参见上一步解释
			 
			 删除远程分支
			 git branch -r -d origin/branch-name
			 git push origin :branch-name
			 
			 
			 1. 创建tag
				git tag v1.0.0-20140303
			2. 提交tag
				git push --tags
			3. 删除tag
				git push origin --delete release_v1.0.0
			4. list tag
				git tag -l
			5. 获取tag
				git clone xxx
					git checkout tag_name
			 
			 
			 
			 删除git相关信息:
			                 find . -name ".git" | xargs rm -Rf
			 
			 https://www.cnblogs.com/ZhangRuoXu/p/6706530.html
             仓库转移（git）
			 
			 1.修改命令
				git remote set-url origin [url]
				例如：git remote set-url origin gitlab@gitlab.chumob.com:php/hasoffer.gitlab@gitlab
				
			 2、查看远程git地址:
			     git remote -v
			 
			 
			 每次提交的简略的统计信息
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 以下命令为常用命令(只做记录，具体如何使用，看具体情况)：
			adb logcat -v time > F:/1.log 抓日志
			adb devices 查看当前已连上的设备
			adb install -r F:/1.apk 安装apk
			adb push F:/1.apk /system/app/ 推送apk文件到设备内部
			adb push /system/temp/ D:/file.txt 将设备内部的文件上传到电脑上
			adb shell 进入shell调试模式( 进入shell之后：logcat | grep "abc" 查看设备日志，使用abc字符串过滤日志，只显示和abc相关的)
			adb shell pm list packages -f 查看所有已安装的应用
			adb shell input keyevent 3 模拟按键输入（这个3，表示的是home键，其他还有模拟操作，自行百度）
			adb shell input touchscreen swipe <x1> <y1> <x2> <y2>
			adb shell am start -n 包名+类名 / 仅包名
			adb shell screenrecord /sdcard/demo.mp4 录制屏幕
			adb reboot 重启设备
			
			1、adb shell 

			2、cat  /data/anr/xxx   >/mnt/sdcard/yy/zz.txt   

			3、exit

			4、adb pull data/anr/traces.txt  d:  ,即可将文件导出到了d盘。
			
			
			
			
			
			
			
			fork 项目操作:
			（1）指定一个上游仓库

#upstream为你自己为同步源取的别名，方便自己记住
git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
（2）从上游仓库获取到分支，及相关的提交信息，它们将被保存在本地的 upstream/master 分支

git fetch upstream
（3）切换到本地的 master 分支

git checkout master
（4）把 upstream/master 分支合并到本地的 master 分支，本地的 master 分支便跟上游仓库保持同步了，并且没有丢失你本地的修改

git merge upstream/master
（5）将本地修改的文件加入git，注意add后面的点“ · ”

git add .
（6）添加修改注释，简单描述你修改的内容

git commit -m "add Notes"
（7）同步后的代码仅仅是保存在本地仓库，记得 push 到 Github

git push -u origin master